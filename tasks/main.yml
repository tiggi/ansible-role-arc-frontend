---
# tasks file for ansible-role-arc-frontend
#

#- name: copy nordugrid.repo file
#  template: src=nordugrid.repo.j2 dest=/etc/yum.repos.d/nordugrid.repo owner=root mode=0644 
#
- name: install nordugrid repo
  yum: pkg=http://download.nordugrid.org/packages/nordugrid-release/releases/{{ arc_frontend_release }}/centos/el7/x86_64/nordugrid-release-{{ arc_frontend_release }}-1.el7.centos.noarch.rpm

- name: install nordugrid rpm key
  rpm_key: key=http://download.nordugrid.org/RPM-GPG-KEY-nordugrid state=present

- name: update all the things
  yum: name=* state=latest

- name: install Nordugrid ARC packages
  yum: name={{ item }} state=present
  with_items: "{{ arc_frontend_packages | default({}) }}"

- name: check if there's a nordugrid.repo.rpmnew
  stat: path=/etc/yum.repos.d/nordugrid.repo.rpmnew
  register: arc_frontend_rpmnew_stat

- name: Replace old nordugrid.repo
  command: mv /etc/yum.repos.d/nordugrid.repo.rpmnew /etc/yum.repos.d/nordugrid.repo
  when: arc_frontend_rpmnew_stat.stat.exists

- name: arc_frontend_griddir must be defined
  assert:
    that: "arc_frontend_griddir is defined"

- name: arc_frontend_sessiondir must be defined
  assert:
    that: "arc_frontend_sessiondir is defined"

- name: arc_frontend_runtimedir must be defined
  assert:
    that: "arc_frontend_runtimedir is defined"

- name: arc_frontend_cachedir must be defined
  assert:
    that: "arc_frontend_cachedir is defined"

- name: Create Grid dir 
  file: path={{ arc_frontend_griddir }} state=directory owner=root mode=0755

- name: Create Session dir 
  file: path={{ arc_frontend_sessiondir }} state=directory owner=nobody group=nobody mode=0755

- name: Create Runtime dir 
  file: path={{ arc_frontend_runtimedir }} state=directory owner=root mode=0755

- name: Create Cache dir 
  file: path={{ arc_frontend_cachedir }} state=directory owner=root mode=0755

- name: Create UnixGroup for OPS dir 
  file: path={{ unixgroup_dir_ops }} state=directory owner=root mode=0755
  when: init_griduser_accts

- name: Populate ops pool file
  lineinfile: dest="{{ unixgroup_dir_ops }}/pool" line={{ item }} create=yes state=present
  with_sequence: start=0 end={{ ops_acct_nr }} format={{ group_name_ops }}%03d
  when: init_griduser_accts

- name: Populate fgi pool file
  lineinfile: dest="{{ unixgroup_dir_fgi }}/pool" line={{ item }} create=yes state=present
  with_sequence: start=0 end={{ fgi_acct_nr }} format={{ group_name_fgi }}%03d
  when: init_griduser_accts

- name: Create UnixGroup for FGI dir 
  file: path={{ unixgroup_dir_fgi }} state=directory owner=root mode=0755
  when: init_griduser_accts

# Run the last tasks in a separate file, so we can exclude the delegation tasks while testing.
- include: step2.yml
  when: ansible_virtualization_type != "docker"

- name: Template arc.conf file
  template: backup=yes src=arc.conf.j2 dest=/etc/arc.conf owner=root mode=0644

- name: start and enable arc frontend services
  service: name={{ item }} state=started enabled=yes
  with_items: "{{ arc_frontend_services | default({}) }}"
  when: arc_frontend_services.0 != ""

- name: disable arc frontend services
  service: name={{ item }} enabled=no
  with_items: "{{ arc_frontend_disabled_services | default({}) }}"
  when: arc_frontend_disabled_services.0 != ""

- name: Create cron job that copies runtime apps from CVMFS
  cron: name="copy runtime" minute=0 hour=6
        user="root" job="/usr/bin/rsync -a --delete {{ arc_frontend_runtimedir_cvmfs }}/ {{ arc_frontend_runtimedir }}"
        cron_file=ansible_copyRuntime
  when: arc_frontend_runtimedir_cvmfs.0 != "" and arc_frontend_runtimedir != ""

- name: run /usr/sbin/nordugridmap
  command: /usr/sbin/nordugridmap

- name: Check perfdata directory permissions
  stat:
        path: /var/log/arc/perfdata
  register: st

- name: Fixup perfdata directory permissions
  file: 
        path: /var/log/arc/perfdata
        mode: 0755  
  when: st.stat.isdir is defined and st.stat.isdir and st.stat.mode == 0777

